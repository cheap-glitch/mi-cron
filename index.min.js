/*!
 * mi-cron
 *
 * A microscopic parser for standard cron expressions.
 *
 * Copyright (c) 2020-present, cheap glitch
 * This software is distributed under the ISC license
 */
Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseCron=void 0;const shorthands={"@hourly":"0 * * * *","@daily":"0 0 * * *","@weekly":"0 0 * * 0","@monthly":"0 0 1 * *","@yearly":"0 0 1 1 *","@annually":"0 0 1 1 *"};function parseCron(e){const n=e.trim().split(/\s+/);if(1==n.length)return n[0]in shorthands?parseCron(shorthands[n[0]]):null;if(5==n.length){let e=null;try{e={minutes:parseField(n[0],0,59),hours:parseField(n[1],0,23),days:parseField(n[2],1,31),months:parseField(n[3],1,12,["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]),weekDays:parseField(n[4],0,6,["sun","mon","tue","wed","thu","fri","sat"])}}catch(e){return null}return e}return null}function parseField(e,n,r,t=[]){const s=Array.from(new Set(e.split(",").flatMap(e=>{const[s,o="1"]=e.split("/"),a=parseInt(o,10);if(Number.isNaN(a))throw Error();if("*"==s)return range(n,r,a);const u=s.match(rangePattern);if(!u)throw Error();const[l,i=null]=u.slice(1).map(e=>parseRangeBoundary(e,n,r,t));if(null===l||null!==i&&i<l)throw Error();return null==i?[l]:range(l,i,a)})));return s.sort((e,n)=>e-n),s}exports.parseCron=parseCron;const bound="(\\d{1,2}|[a-z]{3})",rangePattern=new RegExp(`^${bound}(?:-${bound})?$`,"i");function parseRangeBoundary(e,n,r,t=[]){if(t.includes(e))return t.indexOf(e);const s=parseInt(e,10);return!Number.isNaN(s)&&n<=s&&s<=r?s:null}function cronDateToUTC(e){return new Date(Date.UTC(e.years,e.months-1,e.days,e.hours,e.minutes))}function range(e,n,r=1){return Array.from({length:Math.floor((n-e)/r)+1}).map((n,t)=>e+t*r)}parseCron.nextDate=function(e,n=new Date){const r="string"==typeof e?parseCron(e):e;if(null===r)return null;const t={years:n.getUTCFullYear(),months:n.getUTCMonth()+1,days:n.getUTCDate(),hours:n.getUTCHours(),minutes:n.getUTCMinutes()+1},s=Object.keys(t);for(let e=1;e<s.length;e++){const n=s[e];r[n].includes(t[n])||(s.filter((n,r)=>r>e).forEach(e=>t[e]=r[e][0]),t[n]=r[n].find(e=>e>=t[n]),void 0===t[n]&&(t[n]=r[n][0],t[s[e-1]]++,e="months"!=n?e-2:e)),"days"!=n||r.weekDays.includes(cronDateToUTC(t).getUTCDay())||(t.days++,t.hours=r.hours[0],t.minutes=r.minutes[0],e=1)}return cronDateToUTC(t)};