/*!
 * mi-cron
 *
 * A microscopic parser for standard cron expressions.
 *
 * Copyright (c) 2020-present, cheap glitch
 * This software is distributed under the ISC license
 */
Object.defineProperty(exports,"__esModule",{value:!0}),exports.parseCron=void 0;const shorthands={"@hourly":"0 * * * *","@daily":"0 0 * * *","@weekly":"0 0 * * 0","@monthly":"0 0 1 * *","@yearly":"0 0 1 1 *","@annually":"0 0 1 1 *"};function parseCron(e){const r=e.trim().split(/\s+/);if(1==r.length)return r[0]in shorthands?parseCron(shorthands[r[0]]):void 0;if(5==r.length){let e=void 0;try{e={minutes:parseField(r[0],0,59),hours:parseField(r[1],0,23),days:parseField(r[2],1,31),months:parseField(r[3],1,12,["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]),weekDays:parseField(r[4],0,6,["sun","mon","tue","wed","thu","fri","sat"])}}catch(e){return}return e}}exports.parseCron=parseCron;const bound="(\\d{1,2}|[a-z]{3})",rangePattern=new RegExp(`^${bound}(?:-${bound})?$`,"i");function parseField(e,r,n,t=[]){const o=Array.from(new Set(e.split(",").flatMap(e=>{const[o,s="1"]=e.split("/"),a=parseInt(s,10);if(Number.isNaN(a))throw Error();if("*"==o)return range(r,n,a);const i=o.match(rangePattern);if(!i)throw Error();const[u,d=(e.includes("/")?n:void 0)]=i.slice(1).map(e=>parseRangeBoundary(e,r,n,t));if(void 0===u||void 0!==d&&d<u)throw Error();return null==d?[u]:range(u,d,a)})));return o.sort((e,r)=>e-r),o}function parseRangeBoundary(e,r,n,t=[]){if(t.includes(e))return t.indexOf(e);const o=parseInt(e,10);return!Number.isNaN(o)&&r<=o&&o<=n?o:void 0}function cronDateToUTC(e){return new Date(Date.UTC(e.years,e.months-1,e.days,e.hours,e.minutes))}function range(e,r,n=1){return Array.from({length:Math.floor((r-e)/n)+1}).map((r,t)=>e+t*n)}parseCron.nextDate=function(e,r=new Date){const n="string"==typeof e?parseCron(e):e;if(void 0===n)return;const t={years:r.getUTCFullYear(),months:r.getUTCMonth()+1,days:r.getUTCDate(),hours:r.getUTCHours(),minutes:r.getUTCMinutes()+1},o=Object.keys(t);for(let e=1;e<o.length;e++){const r=o[e];n[r].includes(t[r])||(o.filter((r,n)=>n>e).forEach(e=>t[e]=n[e][0]),t[r]=n[r].find(e=>e>=t[r]),void 0===t[r]&&(t[r]=n[r][0],t[o[e-1]]++,e="months"!=r?e-2:e)),"days"!=r||n.weekDays.includes(cronDateToUTC(t).getUTCDay())||(t.days++,t.hours=n.hours[0],t.minutes=n.minutes[0],e=1)}return cronDateToUTC(t)};